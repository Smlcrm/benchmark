#!/usr/bin/env python3
"""
Test script to verify MultivariateSVR works with Beijing Subway dataset.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import yaml
from benchmarking_pipeline.pipeline.data_loader import DataLoader
from benchmarking_pipeline.pipeline.preprocessor import Preprocessor
from benchmarking_pipeline.models.multivariate.multivariate_svr_model import MultivariateSVRModel

def test_multivariate_svr_beijing_subway():
    """Test MultivariateSVR with Beijing Subway dataset."""
    
    # Load the config
    config_path = "benchmarking_pipeline/configs/multivariate_forecast_horizon_config.yaml"
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    print("=== Testing MultivariateSVR with Beijing Subway Dataset ===")
    print(f"Config loaded from: {config_path}")
    
    # Load dataset
    dataset_cfg = config['dataset']
    data_loader = DataLoader({"dataset": {
        "path": dataset_cfg['path'],
        "name": dataset_cfg['name'],
        "split_ratio": dataset_cfg['split_ratio']
    }})
    
    all_dataset_chunks = data_loader.load_several_chunks(dataset_cfg['chunks'])
    print(f"Loaded {len(all_dataset_chunks)} chunks")
    
    # Preprocess
    preprocessor = Preprocessor({"dataset": {"normalize": dataset_cfg.get('normalize', False)}})
    all_dataset_chunks = [preprocessor.preprocess(chunk).data for chunk in all_dataset_chunks]
    
    # Check dataset structure
    chunk = all_dataset_chunks[0]
    print(f"\nDataset structure:")
    print(f"Train targets shape: {chunk.train.targets.shape}")
    print(f"Train targets columns: {list(chunk.train.targets.columns)}")
    print(f"Validation targets shape: {chunk.validation.targets.shape}")
    print(f"Test targets shape: {chunk.test.targets.shape}")
    print(f"Expected num_targets from config: {dataset_cfg['num_targets']}")
    
    # Create MultivariateSVR model
    svr_params = config['model']['parameters']['SVR']
    model_params = {}
    for k, v in svr_params.items():
        if isinstance(v, list):
            model_params[k] = v[0]  # Take first value from list
        else:
            model_params[k] = v
    
    # Add additional required parameters
    model_params['target_cols'] = list(chunk.train.targets.columns)
    model_params['loss_functions'] = ['mae', 'rmse']
    model_params['primary_loss'] = 'mae'
    
    print(f"\nModel parameters: {model_params}")
    
    model = MultivariateSVRModel({'model_params': {k: v for k, v in model_params.items() 
                                                  if k in ['kernel', 'C', 'epsilon', 'random_state']},
                                 'lookback_window': model_params['lookback_window'],
                                 'forecast_horizon': model_params['forecast_horizon'],
                                 'target_cols': model_params['target_cols'],
                                 'loss_functions': model_params['loss_functions'],
                                 'primary_loss': model_params['primary_loss']})
    
    print(f"Created MultivariateSVR model")
    print(f"Model target_cols: {model.target_cols}")
    print(f"Model n_targets: {model.n_targets}")
    print(f"Model lookback_window: {model.lookback_window}")
    print(f"Model forecast_horizon: {model.forecast_horizon}")
    
    # Test training
    print(f"\n=== Testing Training ===")
    y_context = chunk.train.targets
    y_target = chunk.validation.targets
    
    print(f"Training with y_context shape: {y_context.shape}")
    print(f"Training with y_target shape: {y_target.shape}")
    print(f"y_context sample:")
    print(y_context.head())
    
    try:
        trained_model = model.train(y_context=y_context, y_target=y_target)
        print("✓ Training completed successfully")
        print(f"Model is_fitted: {trained_model.is_fitted}")
    except Exception as e:
        print(f"✗ Training failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test prediction
    print(f"\n=== Testing Prediction ===")
    try:
        predictions = trained_model.predict(y_context=y_context, y_target=chunk.test.targets)
        print(f"✓ Prediction completed successfully")
        print(f"Predictions shape: {predictions.shape}")
        print(f"Expected shape: {chunk.test.targets.shape}")
        print(f"Predictions sample:")
        print(predictions[:5])  # Show first 5 predictions
        
        if predictions.shape == chunk.test.targets.shape:
            print("✓ Prediction shape matches expected shape")
        else:
            print("✗ Prediction shape mismatch")
            print(f"  Expected: {chunk.test.targets.shape}")
            print(f"  Got: {predictions.shape}")
            return False
            
    except Exception as e:
        print(f"✗ Prediction failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test loss computation
    print(f"\n=== Testing Loss Computation ===")
    try:
        loss = trained_model.compute_loss(chunk.test.targets.values, predictions)
        print(f"✓ Loss computation completed successfully")
        print(f"Loss metrics: {loss}")
        
        # Check if we got reasonable loss values
        if 'mae' in loss and 'rmse' in loss:
            print(f"✓ Expected loss metrics found: MAE={loss['mae']:.4f}, RMSE={loss['rmse']:.4f}")
        else:
            print(f"✗ Missing expected loss metrics in: {list(loss.keys())}")
            
    except Exception as e:
        print(f"✗ Loss computation failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test model save/load
    print(f"\n=== Testing Model Save/Load ===")
    try:
        save_path = "test_multivariate_svr_model.pkl"
        trained_model.save(save_path)
        print(f"✓ Model saved to {save_path}")
        
        # Create new model and load
        new_model = MultivariateSVRModel()
        new_model.load(save_path)
        print(f"✓ Model loaded successfully")
        print(f"Loaded model is_fitted: {new_model.is_fitted}")
        print(f"Loaded model n_targets: {new_model.n_targets}")
        
        # Test prediction with loaded model
        predictions_loaded = new_model.predict(y_context=y_context, y_target=chunk.test.targets)
        print(f"✓ Loaded model prediction successful")
        
        # Check if predictions are the same
        import numpy as np
        if np.allclose(predictions, predictions_loaded, rtol=1e-10):
            print("✓ Loaded model predictions match original")
        else:
            print("✗ Loaded model predictions differ from original")
        
        # Clean up
        if os.path.exists(save_path):
            os.remove(save_path)
            print(f"✓ Cleaned up {save_path}")
            
    except Exception as e:
        print(f"✗ Save/Load test failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test parameter setting
    print(f"\n=== Testing Parameter Setting ===")
    try:
        original_params = trained_model.get_params()
        print(f"Original params sample: C={original_params.get('estimator__C', 'N/A')}")
        
        # Set new parameters
        trained_model.set_params(C=2.0, epsilon=0.2)
        new_params = trained_model.get_params()
        print(f"Updated params sample: C={new_params.get('estimator__C', 'N/A')}")
        print("✓ Parameter setting completed successfully")
        
    except Exception as e:
        print(f"✗ Parameter setting failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print(f"\n=== All Tests Passed! ===")
    return True

def test_edge_cases():
    """Test edge cases and error handling."""
    print("\n=== Testing Edge Cases ===")
    
    # Test with minimal data
    print("Testing with minimal data...")
    try:
        import pandas as pd
        import numpy as np
        
        # Create minimal multivariate data
        minimal_data = pd.DataFrame({
            'var1': np.random.randn(20),
            'var2': np.random.randn(20)
        })
        
        model = MultivariateSVRModel({
            'lookback_window': 5,
            'forecast_horizon': 3,
            'target_cols': ['var1', 'var2'],
            'model_params': {'kernel': 'rbf', 'C': 1.0, 'epsilon': 0.1}
        })
        
        # This should work with minimal data
        model.train(y_context=minimal_data[:15], y_target=minimal_data[15:])
        predictions = model.predict(y_context=minimal_data[:15], y_target=minimal_data[15:])
        
        print(f"✓ Minimal data test passed - predictions shape: {predictions.shape}")
        
    except Exception as e:
        print(f"✗ Minimal data test failed: {e}")
        return False
    
    # Test error handling
    print("Testing error handling...")
    try:
        model = MultivariateSVRModel()
        
        # This should raise an error (no training)
        try:
            model.predict(y_context=minimal_data[:10])
            print("✗ Should have raised error for untrained model")
            return False
        except ValueError as e:
            print(f"✓ Correctly caught error for untrained model: {str(e)[:50]}...")
        
        # This should raise an error (no context)
        try:
            model.train(y_context=None)
            print("✗ Should have raised error for no context")
            return False
        except ValueError as e:
            print(f"✓ Correctly caught error for no context: {str(e)[:50]}...")
            
    except Exception as e:
        print(f"✗ Error handling test failed: {e}")
        return False
    
    print("✓ Edge case tests passed!")
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("MULTIVARIATE SVR MODEL TESTING")
    print("=" * 60)
    
    # Run main test
    success = test_multivariate_svr_beijing_subway()
    
    # Run edge case tests
    if success:
        success = test_edge_cases()
    
    print("\n" + "=" * 60)
    if success:
        print("🎉 ALL TESTS PASSED! MultivariateSVR is working correctly!")
        print("The model is ready for integration into the benchmarking pipeline.")
    else:
        print("❌ SOME TESTS FAILED! MultivariateSVR needs fixes.")
    print("=" * 60)